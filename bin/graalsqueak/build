#!/usr/bin/env bash
#
# Copyright (c) 2018-2020 StÃ©phane Micheloud
#
# Licensed under the MIT License.
#

##############################################################################
## Subroutines

getRoot() {
    local source="${BASH_SOURCE[0]}"
    while [ -h "$source" ] ; do
        local linked="$(readlink "$source")"
        local dir="$( cd -P $(dirname "$source") && cd -P $(dirname "$linked") && pwd )"
        source="$dir/$(basename "$linked")"
    done
    ( cd -P "$(dirname "$source")/.." && pwd )
}

# use variables BASENAME, DEBUG, EXITCODE, TIMER_START
cleanup() {
    [[ $1 =~ ^[0-1]$ ]] && EXITCODE=$1

    if [[ $TIMER -eq 1 ]]; then
        local TIMER_END=$(date +'%s')
        local duration=$((TIMER_END - TIMER_START))
        echo "Total elapsed time: $(date -d @$duration +'%H:%M:%S')" 1>&2
    fi
    [[ $DEBUG -eq 1 ]] && echo "$DEBUG_LABEL EXITCODE=$EXITCODE" 1>&2
    exit $EXITCODE
}

args() {
    [[ $# -eq 0 ]] && HELP=1 && return $EXITCODE

    for arg in "$@"; do
        case "$arg" in
        ## options
        -debug)   DEBUG=1 ;;
        -help)    HELP=1 ;;
        -timer)   TIMER=1 ;;
        -verbose) VERBOSE=1 ;;
        -*)
            echo "$ERROR_LABEL Unknown option $arg" 1>&2
            EXITCODE=1 && return $EXITCODE
            ;;
        ## subcommands
        clean)    CLEAN=1 ;;
        dist)     DIST=1 ;;
        help)     HELP=1 ;;
        update)   UPDATE=1 ;;
        *)
            echo "$ERROR_LABEL Unknown subcommand $arg" 1>&2
            EXITCODE=1 && return $EXITCODE
            ;;
        esac
    done
    [[ $DEBUG -eq 1 ]] && echo "$DEBUG_LABEL HELP=$HELP TIMER=$TIMER CLEAN=$CLEAN DIST=$DIST VERBOSE=$VERBOSE"
    # See http://www.cyberciti.biz/faq/linux-unix-formatting-dates-for-display/
    [[ $TIMER -eq 1 ]] && TIMER_START=$(date +"%s")
    $EXITCODE
}

help() {
cat << EOS
Usage: $BASENAME { <option> | <subcommand> }

  Options:
    -debug      show commands executed by this script
    -timer      display total elapsed time
    -verbose    display progress messages

  Subcommands:
    clean       delete generated files
    dist        generate component archive
    help        display this help message
    update      fetch/merge local directories graal/mx
EOS
}

clean() {
    if [[ $DEBUG -eq 1 ]]; then
        echo "$DEBUG_LABEL rm -rf $GRAALSQUEAK_PATH/graalsqueak*.zip $GRAALSQUEAK_PATH/graalsqueak*.jar" 1>&2
    elif [[ $VERBOSE -eq 1 ]]; then
        echo "Delete files $GRAALSQUEAK_PATH/graalsqueak*.zip/jar" 1>&2
    fi
    rm -rf $GRAALSQUEAK_PATH/graalsqueak*.zip $GRAALSQUEAK_PATH/graalsqueak*.jar
    [[ $? -eq 0 ]] || ( EXITCODE=1 && return $EXITCODE )

    return $EXITCODE
}

dist_before() {
    $UTILS_SCRIPT_FILE ensure-test-image
    [[ $? -eq 0 ]] || ( EXITCODE=1 && return $EXITCODE )

    if [[ ! -f "$MX_CMD" ]]; then
        if [[ $DEBUG -eq 1 ]]; then
            echo "$DEBUG_LABEL $GIT_CMD $GIT_OPTS clone --quiet --depth 1 https://github.com/graalvm/mx.git \"$MX_PATH\"" 1>&2
        elif [[ $VERBOSE -eq 1 ]]; then
            echo "Clone mx.git into directory $MX_PATH" 1>&2
        fi
        $GIT_CMD $GIT_OPTS clone --quiet --depth 1 https://github.com/graalvm/mx.git "$MX_PATH"
        [[ $? -eq 0 ]] || ( EXITCODE=1 && return $EXITCODE )
    fi

    JVMCI_HOME="$(find "$ROOT_PATH" -type d -name "openjdk*jvmci*")"
    if [[ ! -f "$JVMCI_HOME/release" ]]; then
        if [[ $DEBUG -eq 1 ]]; then
            echo "$DEBUG_LABEL $UTILS_SCRIPT_FILE download-openjdk8-jvmci \"$ROOT_PATH\"" 1>&2
        elif [[ $VERBOSE -eq 1 ]]; then
            echo "Download OpenJDK 8 JVMCI" 1>&2
        fi
        JVMCI_HOME="$($UTILS_SCRIPT_FILE download-openjdk8-jvmci "$ROOT_PATH")"
        [[ $? -eq 0 ]] || ( EXITCODE=1 && return $EXITCODE )
        
        [[ ! -f "$JVMCI_HOME/release" ]] || ( EXITCODE=1 && return $EXITCODE )
    fi

    if [[ ! -f "$GRAAL_PATH/.travis.yml" ]]; then
        if [[ $DEBUG -eq 1 ]]; then
            echo "$DEBUG_LABEL $UTILS_SCRIPT_FILE shallow-clone-graalvm-project https://github.com/oracle/graal.git" 1>&2
        elif [[ $VERBOSE -eq 1 ]]; then
            echo "Clone graal.git into directory $GRAAL_PATH" 1>&2
        fi
        $UTILS_SCRIPT_FILE shallow-clone-graalvm-project https://github.com/oracle/graal.git
        [[ $? -eq 0 ]] || ( EXITCODE=1 && return $EXITCODE )

        [[ ! -f "$GRAAL_PATH/.travis.yml" ]] || ( EXITCODE=1 && return $EXITCODE )
    fi

    if [[ $DEBUG -eq 1 ]]; then
        echo "$DEBUG_LABEL $VCVARSALL_FILE amd64" 1>&2
    elif [[ $VERBOSE -eq 1 ]]; then
        echo "Set Visual C++ environment variables (x64 architecture)" 1>&2
    fi
    "$VCVARSALL_FILE" amd64
    [[ $? -eq 0 ]] || ( EXITCODE=1 && return $EXITCODE )

    local SHOW_ALL=$((DEBUG+VERBOSE))
    if [[ $SHOW_ALL -gt 0 ]]; then
        ## mx build tool requires environment variables INCLUDE and LIB
        echo "INCLUDE=$INCLUDE" 1>&2
        echo "LIB=$LIB" 1>&2
        local MX_VERSION=$($MX_CMD --version | cut -d ' ' -f 3)
        echo "MX_VERSION: $MX_VERSION" 1>&2
    fi

    return $EXITCODE
}

dist() {
    dist_before
    [[ $EXITCODE -eq 0 ]] || return $EXITCODE

    export JAVA_HOME="$JVMCI_HOME"
    export PATH="$JVMCI_HOME/bin:$PATH:$MX_PATH"

    if [[ $DEBUG -eq 1 ]]; then
        echo "$DEBUG_LABEL $MX_CMD $MX_OPTS gate --strict-mode --tags build,test" 1>&2
    fi
    $MX_CMD $MX_OPTS gate --strict-mode --tags build,test
    [[ $? -eq 0 ]] || ( EXITCODE=1 && return $EXITCODE )

    if [[ $DEBUG -eq 1 ]]; then
        echo "$DEBUG_LABEL $MX_CMD $MX_OPTS --env ce-graalsqueak --dy /vm --force-bash-launchers=true build" 1>&2
    fi   
    $MX_CMD $MX_OPTS --env ce-graalsqueak --dy /vm --force-bash-launchers=true build
    [[ $? -eq 0 ]] || ( EXITCODE=1 && return $EXITCODE )

    if [[ $DEBUG -eq 1 ]]; then
        echo "$DEBUG_LABEL $MX_CMD $MX_OPTS --env ce-graalsqueak --dy /vm --force-bash-launchers=true paths SMALLTALK_INSTALLABLE_BGRAALSQUEAK.EXE_JAVA8" 1>&2
    fi   
    $MX_CMD $MX_OPTS --env ce-graalsqueak --dy /vm --force-bash-launchers=true paths SMALLTALK_INSTALLABLE_BGRAALSQUEAK.EXE_JAVA8
    [[ $? -eq 0 ]] || ( EXITCODE=1 && return $EXITCODE )

    return $EXITCODE
}

update() {
    pushd "$MX_PATH"

    if [[ $DEBUG -eq 1 ]]; then
        echo "$DEBUG_LABEL $GIT_CMD $GIT_OPTS $GIT_OPTS fetch" 1>&2
    elif [[ $VERBOSE -eq 1 ]]; then
        echo "Update MX directory $MX_PATH" 1>&2
    fi
    $GIT_CMD $GIT_OPTS fetch
    [[ $? -eq 0 ]] || ( popd && EXITCODE=1 && return $EXITCODE )

    if [[ $DEBUG -eq 1 ]]; then
        echo "$DEBUG_LABEL $GIT_CMD $GIT_OPTS $GIT_OPTS merge" 1>&2
    elif [[ $VERBOSE -eq 1 ]]; then
        echo "Update MX directory $MX_PATH" 1>&2
    fi
    $GIT_CMD $GIT_OPTS merge
    [[ $? -eq 0 ]] || ( popd && EXITCODE=1 && return $EXITCODE )
    popd

    pushd "$GRAALSQUEAK_PATH"

    if [[ $DEBUG -eq 1 ]]; then
        echo "$DEBUG_LABEL $GIT_CMD $GIT_OPTS $GIT_OPTS fetch upstream dev" 1>&2
    elif [[ $VERBOSE -eq 1 ]]; then
        echo "Update MX directory $MX_PATH" 1>&2
    fi
    $GIT_CMD $GIT_OPTS fetch upstream dev
    [[ $? -eq 0 ]] || ( popd && EXITCODE=1 && return $EXITCODE )

    if [[ $DEBUG -eq 1 ]]; then
        echo "$DEBUG_LABEL $GIT_CMD $GIT_OPTS $GIT_OPTS merge upstream/dev" 1>&2
    elif [[ $VERBOSE -eq 1 ]]; then
        echo "Update MX directory $MX_PATH" 1>&2
    fi
    $GIT_CMD $GIT_OPTS merge upstream/dev
    [[ $? -eq 0 ]] || ( popd && EXITCODE=1 && return $EXITCODE )

    popd
    return $EXITCODE
}

##############################################################################
## Environment setup

BASENAME=$(basename "${BASH_SOURCE[0]%.*}")

EXITCODE=0

ROOT_PATH="$(getRoot)"
GRAAL_PATH="$ROOT_PATH/graal"
GRAALSQUEAK_PATH="$ROOT_PATH/graalsqueak"
MX_PATH="$ROOT_PATH/mx"

JVMCI_HOME=

VCVARSALL_FILE="$(find "$MSVS_HOME" -name vcvarsall.bat)"
[[ -f "$VCVARSALL_FILE" ]] || cleanup 1

UTILS_SCRIPT_FILE=$GRAALSQUEAK_PATH/mx.graalsqueak/utils.sh
[[ -f "$UTILS_SCRIPT_FILE" ]] || cleanup 1

CLEAN=0
DIST=0
DEBUG=0
HELP=0
TIMER=0
UPDATE=0
VERBOSE=0

DEBUG_LABEL="[46m[DEBUG][0m"
ERROR_LABEL="[91mError:[0m"

case "$(uname -s | tr '[:upper:]' '[:lower:]')" in
    "msys"*|"cygwin"*|"mingw"*)
        PYTHON_CMD="$(which python).exe"
        MX_CMD="$MX_PATH/mx.cmd"
        GIT_CMD="$(which git).exe"
        ;;
    *)
        PYTHON_CMD="$(which python)"
        MX_CMD="$MX_PATH/mx"
        GIT_CMD="$(which git)"
        ;;
esac
## mx command tool requires Python 2.7+ to be in PATH
if [[ ! -x "$PYTHON_CMD" ]]; then
    echo "$ERROR_LABEL Python command not found" 1>&2
    cleanup 1
fi
## graalsqueak is a mx project
if [[ ! -f "$MX_CMD" ]]; then
    echo "$ERROR_LABEL mx build tool not found" 1>&2
    cleanup 1
fi
## both directories mx/ and graalsqueak/ are Github clones
if [[ ! -f "$GIT_CMD" ]]; then
    echo "$ERROR_LABEL git command tool not found" 1>&2
    cleanup 1
fi

## mx command tool requires Java installation
## - either option --java-home or --extra-java-homes
## - or environment variable JAVA_HOME or EXTRA_JAVA_HOMES 
## - or mx.<proj>\env (using mx/select_jdk.py - p <proj_path>)
MX_OPTS=
GIT_OPTS=

args "$@"
[[ $EXITCODE -eq 0 ]] || cleanup 1

##############################################################################
## Main

[[ $HELP -eq 1 ]] && help && cleanup

if [[ $CLEAN -eq 1 ]]; then
    clean
    [[ $EXITCODE -eq 0 ]] || cleanup 1
fi
if [[ $UPDATE -eq 1 ]]; then
    update
    [[ $EXITCODE -eq 0 ]] || cleanup 1
fi
if [[ $DIST -eq 1 ]]; then
    dist
    [[ $EXITCODE -eq 0 ]] || cleanup 1
fi

##############################################################################
## Cleanups

cleanup
