#!/usr/bin/env bash
#
# Copyright (c) 2018-2020 StÃ©phane Micheloud
#
# Licensed under the MIT License.
#

##############################################################################
## Subroutines

getHome() {
    local source="${BASH_SOURCE[0]}"
    while [ -h "$source" ] ; do
        local linked="$(readlink "$source")"
        local dir="$( cd -P $(dirname "$source") && cd -P $(dirname "$linked") && pwd )"
        source="$dir/$(basename "$linked")"
    done
    ( cd -P "$(dirname "$source")" && pwd )
}

# use variables BASENAME, DEBUG, EXITCODE, TIMER_START
cleanup() {
    [[ $1 =~ ^[0-1]$ ]] && EXITCODE=$1

    if [[ $TIMER -eq 1 ]]; then
        local TIMER_END=$(date +'%s')
        local duration=$((TIMER_END - TIMER_START))
        echo "Total elapsed time: $(date -d @$duration +'%H:%M:%S')" 1>&2
    fi
    [[ $DEBUG -eq 1 ]] && echo "$DEBUG_LABEL EXITCODE=$EXITCODE" 1>&2
    exit $EXITCODE
}

args() {
    [[ $# -eq 0 ]] && HELP=1 && return $EXITCODE

    for arg in "$@"; do
        case "$arg" in
        ## options
        -debug)   DEBUG=1 ;;
        -help)    HELP=1 ;;
        -timer)   TIMER=1 ;;
        -verbose) VERBOSE=1 ;;
        -*)
            echo "$ERROR_LABEL Unknown option $arg" 1>&2
            EXITCODE=1 && return $EXITCODE
            ;;
        ## subcommands
        clean) CLEAN=1 ;;
        dist)  DIST=1 ;;
        help)  HELP=1 ;;
        *)
            echo "$ERROR_LABEL Unknown subcommand $arg" 1>&2
            EXITCODE=1 && return $EXITCODE
            ;;
        esac
    done
    [[ $DEBUG -eq 1 ]] && echo "$DEBUG_LABEL HELP=$HELP TIMER=$TIMER CLEAN=$CLEAN DIST=$DIST VERBOSE=$VERBOSE"
    # See http://www.cyberciti.biz/faq/linux-unix-formatting-dates-for-display/
    [[ $TIMER -eq 1 ]] && TIMER_START=$(date +"%s")
    $EXITCODE
}

help() {
cat << EOS
Usage: $BASENAME { <option> | <subcommand> }

  Options:
    -debug      show commands executed by this script
    -timer      display total elapsed time
    -verbose    display progress messages

  Subcommands:
    clean       delete generated files
    dist        generate component archive
    help        display this help message
EOS
}

clean() {
    if [[ $DEBUG -eq 1 ]]; then
        echo "$DEBUG_LABEL rm -rf $TOOL_HOME/graalsqueak*.zip $TOOL_HOME/graalsqueak*.jar" 1>&2
    elif [[ $VERBOSE -eq 1 ]]; then
        echo "Delete files $TOOL_HOME/graalsqueak*.zip/jar" 1>&2
    fi
    rm -rf $TOOL_HOME/graalsqueak*.zip $TOOL_HOME/graalsqueak*.jar
    [[ $? -eq 0 ]] || ( EXITCODE=1 && return $EXITCODE )
    $EXITCODE
}

dist() {
    local SHOW_VERSION=$((DEBUG+VERBOSE))
    if [[ $SHOW_VERSION -gt 0 ]]; then
        local MX_VERSION=$($MX_CMD --version | cut -d ' ' -f 3)
        echo "MX_VERSION: $MX_VERSION" 1>&2
    fi
    if [[ $DEBUG -eq 1 ]]; then
        echo "$DEBUG_LABEL $MX_CMD $MX_OPTS build" 1>&2
    elif [[ $VERBOSE -eq 1 ]]; then
        echo "Build Java archives" 1>&2
    fi
    $MX_CMD $MX_OPTS build
    [[ $? -eq 0 ]] || ( EXITCODE=1 && return $EXITCODE )
    local SCRIPT_FILE=$TOOL_HOME/scripts/make_component.sh
    if [[ ! -f "$SCRIPT_FILE" ]]; then
        echo "$ERROR_LABEL Batch file !_SCRIPT_FILE:%_ROOT_DIR%=! not found" 1>&2
        EXITCODE=1 && return $EXITCODE
    fi
    if [[ $DEBUG -eq 1 ]]; then
        echo "%_DEBUG_LABEL% source $SCRIPT_FILE" 1>&2
    elif [[ $VERBOSE -eq 1 ]]; then
        echo "Executing script $TOOL_HOME/scripts/make_component.sh" 1>&2
    fi
    source $SCRIPT_FILE
    [[ $? -eq 0 ]] || ( EXITCODE=1 && return $EXITCODE )
    $EXITCODE
}

##############################################################################
## Environment setup

BASENAME=$(basename "${BASH_SOURCE[0]%.*}")

EXITCODE=0

TOOL_HOME="$(getHome)"

CLEAN=0
DIST=0
DEBUG=0
HELP=0
TIMER=0
VERBOSE=0

DEBUG_LABEL="[46m[DEBUG][0m"
ERROR_LABEL="[91mError:[0m"

case "$(uname -s | tr '[:upper:]' '[:lower:]')" in
    "msys"*|"cygwin"*|"mingw"*)
        PYTHON_CMD="$(which python).exe"
        MX_CMD="$(dirname "$TOOL_HOME")/mx/mx.cmd"
        JAR_CMD="$(which jar).exe"
        ;;
    *)
        PYTHON_CMD="$(which python)"
        MX_CMD="$(dirname "$TOOL_HOME")/mx/mx"
        JAR_CMD="$(which jar)"
        ;;
esac
## mx command tool requires Python 2.7+ to be in PATH
if [[ ! -x "$PYTHON_CMD" ]]; then
    echo "$ERROR_LABEL Python command not found" 1>&2
    cleanup 1
fi
## scripts/make_component.sh requires jar executable to be in PATH
if [[ ! -x "$JAR_CMD" ]]; then
    echo "$ERROR_LABEL jar command not found" 1>&2
    cleanup 1
fi
## graalsqueak is a mx project
if [[ ! -f "$MX_CMD" ]]; then
    echo "$ERROR_LABEL mx command tool not found" 1>&2
    cleanup 1
fi

MX_OPTS=
[[ -n "$JAVA_HOME" ]] && MX_OPTS="--java-home $JAVA_HOME"

args "$@"
[[ $EXITCODE -eq 0 ]] || cleanup 1

##############################################################################
## Main

[[ $HELP -eq 1 ]] && help && cleanup

if [[ $CLEAN -eq 1 ]]; then
    clean
    [[ $EXITCODE -eq 0 ]] || cleanup 1
fi
if [[ $DIST -eq 1 ]]; then
    dist
    [[ $EXITCODE -eq 0 ]] || cleanup 1
fi

##############################################################################
## Cleanups

cleanup
